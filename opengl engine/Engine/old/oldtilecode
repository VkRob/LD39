//
//		// Create a VAO
//		int vao;
//		vao = glGenVertexArrays();
//		glBindVertexArray(vao);
//
//		// Create a Vertex Buffer to carry the vertexes
//		int vbo = glGenBuffers();
//
//		// Create a list of vertices w/ color data
//		// pos (vec2f) + color (vec3f) + texture coordinates (vec2f)
//		float vertices[] = {
//				// Positions (2f), Texture Coordinates (2f)
//				-0.5f, 0.5f, 0.0f, 0.0f, // Top-left
//				0.5f, 0.5f, 1.0f, 0.0f, // Top-right
//				0.5f, -0.5f, 1.0f, 1.0f, // Bottom-right
//				-0.5f, -0.5f, 0.0f, 1.0f // Bottom-left
//		};
//
//		int elements[] = {
//				// Triangles to be rendered
//				0, 1, 2, // Triangle 1
//				2, 3, 0 // Triangle 2
//		};
//
//		float pixels2[] = ImageLoader.getTexturePixels("/test.png");
//
//		// Activate the vbo
//		glBindBuffer(GL_ARRAY_BUFFER, vbo);
//
//		// Copy the vertex data to the vbo
//		glBufferData(GL_ARRAY_BUFFER, vertices, GL_STATIC_DRAW);
//
//		int ebo = glGenBuffers();
//		glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ebo);
//		glBufferData(GL_ELEMENT_ARRAY_BUFFER, elements, GL_STATIC_DRAW);
//		modelMatrix = Matrix4f.rotate(180f, new Vector3f(1.0f, 0.0f, 0.0f));
		projectionMatrix = Matrix4f.perspective(45.0f, Main.WIDTH / Main.HEIGHT, 1.0f, 10.0f);
//		ShaderProgram shader = new ShaderProgram("outColor");
//		int shaderProgramID = shader.getShaderProgramID();
//
//		shader.addShaderAttrib(new ShaderAttribVector2f("position", shaderProgramID));
//		shader.addShaderAttrib(new ShaderAttribVector2f("texcoord", shaderProgramID));
//		shader.pushAttribPointers();
//
//		uniformCameraPosition = new ShaderUniformVector3f("cameraPosition", shaderProgramID);
//		uniformModelMatrix = new ShaderUniformMatrix4f("model", shaderProgramID);
//		uniformProjectionMatrix = new ShaderUniformMatrix4f("proj", shaderProgramID);
//
//		shader.addShaderUniform(uniformCameraPosition);
//		shader.addShaderUniform(uniformModelMatrix);
//		shader.addShaderUniform(uniformProjectionMatrix);
//
//		uniformModelMatrix.sendValueToShader(modelMatrix);
//		uniformProjectionMatrix.sendValueToShader(projectionMatrix);
//
//		/* NEAREST = Pixelated, LINEAR = Blurred */
//		shader.addShaderTexture(new ShaderTexture("texture", pixels2, 16, 16, GL_NEAREST));